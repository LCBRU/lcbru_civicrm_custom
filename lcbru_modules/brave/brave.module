<?php

const BRAVE_PREMISSION_PRINT_LABELS = 'print brave labels';


function brave_civicrm_validateForm( $formName, &$fields, &$files, &$form, &$errors ) {

    $contactFormBeginning = 'CRM_Case_Form_';

    if (lcbru_string_starts_with($formName, $contactFormBeginning)) {
        foreach ($fields as $key => $field) {
            if (lcbru_string_starts_with($key, lcbru_get_custom_field_id_name('CIVI_FIELD_BRAVE_ID') . '_')) {
                if (brave_isInvalidBraveId($field)) {
                    $errors[$key] = ts(CIVI_FIELD_BRAVE_ID . " is not valid.  Should be of the format 'BavPtnnnnnnnX', where 'nnnnnnn' is a 7 digit number and X is a valid check letter");
                }
            }
            if (lcbru_string_starts_with($key, lcbru_get_custom_field_id_name('CIVI_FIELD_BRAVE_BRICCS_ID') . '_')) {
                if (briccs_isInvalidBriccsId($field)) {
                    $errors[$key] = ts(CIVI_FIELD_BRAVE_BRICCS_ID . " is not valid.  Should be of the format 'BPtnnnnnnnn', where 'nnnnnnnn' is a 8 digit number");
                }
            }
            if (lcbru_string_starts_with($key, lcbru_get_custom_field_id_name('CIVI_FIELD_BRAVE_FAMILY_ID') . '_')) {
                if (brave_isInvalidBraveFamilyId($field)) {
                    $errors[$key] = ts(CIVI_FIELD_BRAVE_FAMILY_ID . " is not valid.  Should be of the format 'BavFmnnnnnnnX', where 'nnnnnnn' is a 7 digit number and X is a valid check letter");
                }
            }
        }
    }
    return;
}


function brave_isInvalidBraveId($value) {
  $idGenerator = new IdGenerator('BavPt');

  return !$idGenerator->validate($value);

}


function brave_isInvalidBraveFamilyId($value) {
  $idGenerator = new IdGenerator('BavFm');

  return !$idGenerator->validate($value);

}


function brave_lcbru_populateStudyIds(array &$studyIds) {
    $studyIds[] = 'CIVI_FIELD_BRAVE_ID';
    $studyIds[] = 'CIVI_FIELD_BRAVE_FAMILY_ID';   
}


function brave_label_printer_populateDefinitions(array &$definitions) {
  $definitions['BRAVE Pack'] = array(
      'name' => 'BRAVE Pack',
      'permission' => BRAVE_PREMISSION_PRINT_LABELS,
      'participant_id_generators' => array(
        'study_id' => new IdGenerator('BavPt'),
        ),
      'labels' => array(
        'family' => array(
          'id_generator' => new IdGenerator('BavSa'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE,
          'id_count' => 5,
          'labels_per_id' => 1
          ),
        'samples' => array(
          'id_generator' => new IdGenerator('BavFm'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE,
          'id_count' => 1,
          'labels_per_id' => 7
          ),
        'citrate bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_CITRATE,
          'study_name' => 'BAV',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        'serum bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_SERUM,
          'study_name' => 'BAV',
          'id_count' => 1,
          'labels_per_id' => 1
          )
        ),
    );
  $definitions['BRAVE Poland Pack'] = array(
      'name' => 'BRAVE Poland Pack',
      'permission' => BRAVE_PREMISSION_PRINT_LABELS,
      'participant_id_generators' => array(
        'study_id' => new IdGenerator('BavPl'),
        ),
      'labels' => array(
        'family' => array(
          'id_generator' => new IdGenerator('BavSa'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE,
          'id_count' => 5,
          'labels_per_id' => 1
          ),
        'samples' => array(
          'id_generator' => new IdGenerator('BavFm'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE,
          'id_count' => 1,
          'labels_per_id' => 7
          ),
        'citrate bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_CITRATE_POLISH,
          'study_name' => 'BAV PL',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        'serum bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_SERUM_POLISH,
          'study_name' => 'BAV PL',
          'id_count' => 1,
          'labels_per_id' => 1
          )
        ),
    );
  $definitions['BRAVE External Pack'] = array(
      'name' => 'BRAVE External Pack',
      'permission' => BRAVE_PREMISSION_PRINT_LABELS,
      'participant_id_generators' => array(
        'study_id' => new IdGenerator('BavXPt'),
        ),
      'labels' => array(
        'family' => array(
          'id_generator' => new IdGenerator('BavSa'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE,
          'id_count' => 3,
          'labels_per_id' => 1
          ),
        'samples' => array(
          'id_generator' => new IdGenerator('BavFm'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE,
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        'edta bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_EDTA_EXTERNAL,
          'study_name' => 'BAV Ext',
          'id_count' => 1,
          'labels_per_id' => 1
          )
        ),
    );
}


function brave_lcbru_getAutoCustomFieldValue($fieldName) {
    Guard::AssertString_NotEmpty('$fieldName', $fieldName);

    switch ($fieldName) {
        case 'CIVI_FIELD_BRAVE_ID':
            $studyIdGenerator = new IdGenerator('BavPt');
            return $studyIdGenerator->next();
            break;
        case 'CIVI_FIELD_BRAVE_FAMILY_ID':
            $studyIdGenerator = new IdGenerator('BavFm');
            return $studyIdGenerator->next();
            break;
    }
}


function brave_permission() {
  return array(
    BRAVE_PREMISSION_PRINT_LABELS => array(
      'title' => t('Print BRAVE labels'),
      'description' => t('Create and print BRAVE ID labels.'),
    ),
  );
}


function brave_lcbru_getStudyIdFieldName($studyId) {
    if (!brave_isInvalidBraveId($studyId)) {
        return 'CIVI_FIELD_BRAVE_ID';
    } elseif (!brave_isInvalidBraveFamilyId($studyId)) {
        return 'CIVI_FIELD_BRAVE_FAMILY_ID';   
    }
}


/*
 * Waiting for Sue to transfer recruitment status to REDCap
 *
 *
function brave_participant_importer_populateDefinitions() {
    return array(
        'Brave REDCap' => array(
            'query' => "
                SELECT
                            MAX(COALESCE(es.ts, 0)) AS last_update,
                            s.record,
                            CIVI_FIELD_BRAVE_ID,
                            s.start_date,
                            CIVI_FIELD_BRAVE_BRICCS_ID,
                            CIVI_FIELD_BRAVE_FAMILY_ID,
                            UHL_S_number,
                            NHS_number,
                            title,
                            first_name,
                            last_name,
                            birth_date,
                            CASE gender
                                   WHEN 0 THEN 'Female'
                                   WHEN 1 THEN 'male'
                                END AS gender,
                            
                            supplemental_address_1,
                            street_address,
                            supplemental_address_2,
                            city,
                            state_province,
                            postal_code,
                            
                            email,
MAYBE                       CASE
MAYBE                           WHEN COALESCE(study_status_comp_yn, '1') = '1' THEN 'recruited'
MAYBE                           WHEN non_complete_rsn = '5' THEN 'withdrawn'
MAYBE                           ELSE 'excluded'
MAYBE                       END AS case_status
                FROM    (
                    SELECT
                                rd.record,
                                rd.project_id,
                        GROUP_CONCAT(CASE WHEN field_name = 'int_date' THEN VALUE ELSE NULL END) AS start_date,
                        rd.record AS CIVI_FIELD_BRAVE_ID,
                        GROUP_CONCAT(CASE WHEN field_name = 'briccs_id' THEN VALUE ELSE NULL END) AS CIVI_FIELD_BRAVE_BRICCS_ID,
                        GROUP_CONCAT(CASE WHEN field_name = 'bav_family_id' THEN VALUE ELSE NULL END) AS CIVI_FIELD_BRAVE_FAMILY_ID,
                        GROUP_CONCAT(CASE WHEN field_name = 's_number' THEN VALUE ELSE NULL END) AS UHL_S_number,
                        GROUP_CONCAT(CASE WHEN field_name = 'nhs_number' THEN VALUE ELSE NULL END) AS NHS_number,
                        GROUP_CONCAT(CASE WHEN field_name = 'title' THEN VALUE ELSE NULL END) AS title,
                        GROUP_CONCAT(CASE WHEN field_name = 'first_name' THEN VALUE ELSE NULL END) AS first_name,
                        GROUP_CONCAT(CASE WHEN field_name = 'last_name' THEN VALUE ELSE NULL END) AS last_name,
                        
                        GROUP_CONCAT(CASE WHEN field_name = 'address_line1' THEN VALUE ELSE NULL END) AS supplemental_address_1,
                        GROUP_CONCAT(CASE WHEN field_name = 'address_line2' THEN VALUE ELSE NULL END) AS street_address,
                        GROUP_CONCAT(CASE WHEN field_name = 'address_line3' THEN VALUE ELSE NULL END) AS supplemental_address_2,
                        GROUP_CONCAT(CASE WHEN field_name = 'address_city' THEN VALUE ELSE NULL END) AS city,
                        GROUP_CONCAT(CASE WHEN field_name = 'address_county' THEN VALUE ELSE NULL END) AS state_province,
                        GROUP_CONCAT(CASE WHEN field_name = 'address_postcode' THEN VALUE ELSE NULL END) AS postal_code,

                        REPLACE(MAX(CASE WHEN field_name = 'dob' THEN VALUE ELSE NULL END), '-', '') AS birth_date,
                        GROUP_CONCAT(CASE WHEN field_name = 'gender' THEN VALUE ELSE NULL END) AS gender,
                        
                        GROUP_CONCAT(CASE WHEN field_name = 'pat_email1' THEN VALUE ELSE NULL END) AS email,

MAYBE                   GROUP_CONCAT(CASE WHEN field_name = 'study_status_comp_yn' THEN VALUE ELSE NULL END) AS study_status_comp_yn,
MAYBE                   GROUP_CONCAT(CASE WHEN field_name = 'non_complete_rsn' THEN VALUE ELSE NULL END) AS non_complete_rsn
                    FROM    redcap_data rd
                    WHERE rd.project_id = 26
                    GROUP BY rd.record, rd.project_id
                ) s
                LEFT JOIN redcap_log_event es
                    ON es.project_id = s.project_id
                    AND es.pk = s.record
                    AND es.`event` NOT IN ('DATA_EXPORT', 'DELETE')
                    # Ignore events caused by the data import from
                    # the mobile app
                    AND es.page NOT IN ('DataImportController:index')
                WHERE LENGTH(RTRIM(LTRIM(COALESCE(s.record, '')))) > 0
                GROUP BY s.record
            ",
             'case_type_name' => CIVI_CASE_TYPE_BRAVE,
             'add_pmi' => 0
        )
    );
}
*/