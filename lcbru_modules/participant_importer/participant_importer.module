<?php

require_once("ParticipantImporter.php");

const PARTICIPANT_IMPORTER_PERMISSION = 'access Participant Importer';
const PARTICIPANT_IMPORTER_PERMISSION_CONFIG = 'Participant Importer Configuration';
const PARTICIPANT_IMPORTER_FORM_CSVFILE = 'csvfile';
const PARTICIPANT_IMPORTER_FORM_CSVFILE_FORMAT = 'csvfile_format';
const PARTICIPANT_IMPORTER_FORM_CASE_TYPE = 'case_type';
const PARTICIPANT_IMPORTER_FORM_ERRORS_ONLY = 'errors_only';
const PARTICIPANT_IMPORTER_FORM_CREATE_NEW_PARTICIPANTS = 'create_new_participants';
const PARTICIPANT_IMPORTER_FORM_CREATE_NEW_CASES = 'create_new_cases';
const PARTICIPANT_IMPORTER_FORM_IGNORE_CASE_STATUSES = 'ignore_case_statuses';
const PARTICIPANT_IMPORTER_FORM_IGNORE_MISSING_PARTICIPANTS = 'ignore_missing_participants';
const PARTICIPANT_IMPORTER_FORM_HELP = 'help_text';
const PARTICIPANT_IMPORTER_IMPORT_CRON_JOB = 'Participant Importer Import';

/**
 * Implements hook_permission() to restrict access to the PMI Importer data.
 */
function participant_importer_permission() {
  return array(
    PARTICIPANT_IMPORTER_PERMISSION => array(
      'title' => t('Access Participant Importer'),
      'description' => t('Allow users to access the Participant Importer.'),
    ),
    PARTICIPANT_IMPORTER_PERMISSION_CONFIG => array (
      'title' => t(PARTICIPANT_IMPORTER_PERMISSION_CONFIG), 
      'description' => t(PARTICIPANT_IMPORTER_PERMISSION_CONFIG),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function participant_importer_menu() {
  $items['content/participant_importer'] = array(
    'title' => 'Participant Importer',
    'description' => 'Load participant details from a file.',
    'menu_name' => 'main-menu',
    'page callback' => '_participant_importer_form',
    'access arguments' => array(PARTICIPANT_IMPORTER_PERMISSION),
    'expanded' => TRUE,
  );
  $items['admin/config/content/participant_importer'] = array(
    'title' => PARTICIPANT_IMPORTER_PERMISSION_CONFIG,
    'description' => PARTICIPANT_IMPORTER_PERMISSION_CONFIG,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_participant_importer_config_form'),
    'access arguments' => array(PARTICIPANT_IMPORTER_PERMISSION_CONFIG),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function _participant_importer_form($action = '') {

  switch ($action) {
    case 'complete':
      return drupal_get_form('_participant_importer_complete_form');
      break;
    case 'help':
      return drupal_get_form('_participant_importer_help_form');
      break;
    default:
      return drupal_get_form('_participant_importer_upload_form');
      break;
  }
}

function _participant_importer_upload_form($form, &$form_state) {
    civicrm_initialize();

    $form[PARTICIPANT_IMPORTER_FORM_HELP] = array(
      '#type' => 'link',
      '#title' => t('View the help document for this tool.'),
      '#href' => 'content/participant_importer/help/',
    );

    $ch = new CaseHelper();
    $form[PARTICIPANT_IMPORTER_FORM_CASE_TYPE] = array(
      '#type' => 'select',
      '#title' => t("Case Type to Create"),
      '#required' => TRUE,
      '#options' => $ch->getCaseTypeSelectOptions(),
      );

    $form[PARTICIPANT_IMPORTER_FORM_CSVFILE] = array(
      '#type' => 'managed_file',
      '#title' => t("Upload a CSV file of participant data"),
      '#upload_validators' => array('file_validate_extensions' => array('csv')),
      '#required' => TRUE,
      );

    $form[PARTICIPANT_IMPORTER_FORM_CSVFILE_FORMAT] = array(
      '#type' => 'select',
      '#title' => t("CSV File Format"),
      '#required' => FALSE,
      '#options' => _participant_importer_csvfile_formats_options(),
      );

    $form[PARTICIPANT_IMPORTER_FORM_CREATE_NEW_PARTICIPANTS] = array(
        '#type' => 'checkbox',
        '#title' => t('Create new participants if they do not already exist?'),
      );

    $form[PARTICIPANT_IMPORTER_FORM_IGNORE_MISSING_PARTICIPANTS] = array(
        '#type' => 'checkbox',
        '#title' => t('Ignore record if participant does not exist?'),
      );

    $form[PARTICIPANT_IMPORTER_FORM_CREATE_NEW_CASES] = array(
        '#type' => 'checkbox',
        '#title' => t('Create new cases if they do not already exist?'),
      );

    $csh = new OptionValueHelper(OptionValueHelper::CASE_STATUS);
    $form[PARTICIPANT_IMPORTER_FORM_IGNORE_CASE_STATUSES] = array(
        '#type' => 'select',
        '#title' => t('Select case statuses to ignore'),
        '#options' => $csh->getSelectOptions(),
        '#multiple' => True
      );

    $form[PARTICIPANT_IMPORTER_FORM_ERRORS_ONLY] = array(
        '#type' => 'checkbox',
        '#title' => t('Do not import.  Show errors only.'),
      );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Continue'
      );

    return $form;
}

function _participant_importer_help_form($form, &$form_state) {
    civicrm_initialize();
    $form['#prefix'] = 'Please upload a comma separated values (csv) file containing the participants:';

    $ch = new CaseHelper();
    $cvh = new CustomFieldHelper();

    $contact_fields = '';

    foreach (CiviCrmApiHelper::getObjectFields('contact') as $field) {
      $contact_fields .= "<li>${field['name']}</li>";
    }

    $studyIds = '';

    foreach ($ch->getStudyIdFieldNames() as $studyId) {
      $studyIds .= "<li>$studyId</li>";
    }

    $customStudies = "";

    foreach ($ch->getCaseTypeSelectOptions() as $caseTypeId => $CaseName) {
      $customFields = "";

      foreach ($cvh->getFieldsForCaseType($caseTypeId) as $customField) {
        $customFields .= "<li>${customField['name']}</li>";
      }
      $customStudies .=
        "<li>$CaseName
          <ul>
            $customFields
          </ul>
        </li>";
    }

    $agStudies = '';

    foreach ($cvh->getStudiesThatSupportAutoGeneratedIds() as $study) {
      $agStudies .= "<li>$study</li>";
    }

    $markup = <<<EOT
<ul>
  <li>Dates must be in the format 'yyyymmdd'</li>
  <li>Contact fields columns have the field names from the Contact API.  For example:
    <ul>
        <li>do_not_email</li>
        <li>do_not_phone</li>
        <li>do_not_mail</li>
        <li>do_not_sms</li>
        <li>first_name</li>
        <li>middle_name</li>
        <li>last_name</li>
        <li>job_title</li>
        <li>birth_date</li>
        <li>is_deceased</li>
        <li>deceased_date</li>
        <li>is_deleted</li>
        <li>street_address</li>
        <li>supplemental_address_1</li>
        <li>supplemental_address_2</li>
        <li>city</li>
        <li>postal_code</li>
        <li>state_province</li>
        <li>country</li>
        <li>phone</li>
        <li>email</li>
    </ul>
  </li>
  <li>Custom field for contacts should be in columns named after the custom field name.  For example:
      <ul>
        <li>NHS_number</li>
        <li>UHL_S_number</li>
      </ul>
  </li>
  <li>Similarly for Case custom fields:
    <ul>
      $customStudies
    </ul>
  </li>
  <li>Values are looked up using their names from the columns:
      <ul>
        <li>gender</li>
        <li>title</li>
        <li>preferred_communication_method</li>
        <li>phone_location</li>
        <li>phone_type</li>
        <li>address_location</li>
        <li>state_province</li>
        <li>case_status</li>
      </ul>
  </li>
  <li>Contacts are looked up using their NHS and UHL System numbers, or their study ID if the column is named with the custom column name.  For example:
    <ul>$studyIds</ul>
  </li>
  <li>Participant study IDs can be auto-generated for some studies by placing the text '&lt;auto generate&gt;' in the appropriate participant study ID column.  This works for these studies:
    <ul>$agStudies</ul>
  </li>
</ul>
EOT;

    $form[PARTICIPANT_IMPORTER_FORM_HELP] = array(
      '#markup' => t($markup),
      );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'OK'
      );

    return $form;
}

function _participant_importer_complete_form($form, &$form_state) {

    $form['#prefix'] = 'Participants have been uploaded successfully';

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'OK'
      );

    return $form;
}

function _participant_importer_upload_form_submit($form, &$form_state) {
    civicrm_initialize();
    set_time_limit(100);

    $filepath = drupal_realpath($form_state['complete form'][PARTICIPANT_IMPORTER_FORM_CSVFILE]['#file']->uri);
    $filename = $form_state['complete form'][PARTICIPANT_IMPORTER_FORM_CSVFILE]['#file']->filename;
    $caseTypeId = $form_state['values'][PARTICIPANT_IMPORTER_FORM_CASE_TYPE];
    $showErrorsOnly = $form_state['values'][PARTICIPANT_IMPORTER_FORM_ERRORS_ONLY];
    $createNewParticipants = $form_state['values'][PARTICIPANT_IMPORTER_FORM_CREATE_NEW_PARTICIPANTS];
    $createNewCases = $form_state['values'][PARTICIPANT_IMPORTER_FORM_CREATE_NEW_CASES];
    $ignoreCaseStatuses = $form_state['values'][PARTICIPANT_IMPORTER_FORM_IGNORE_CASE_STATUSES];
    $ignoreMissingParticipants = $form_state['values'][PARTICIPANT_IMPORTER_FORM_IGNORE_MISSING_PARTICIPANTS];

    Guard::AssertString_NotEmpty('$filepath', $filepath);

    if (!$showErrorsOnly) {

      $pi = new ParticipantImporter(
        $caseTypeId,
        (bool)$createNewParticipants,
        (bool)$createNewCases,
        $ignoreCaseStatuses,
        (bool)$ignoreMissingParticipants
        );
      
      $pi->importFromCsv(_get_csv_from_filename($filepath, $form_state['values'][PARTICIPANT_IMPORTER_FORM_CSVFILE_FORMAT]));
    }

    drupal_set_message("Uploaded file: $filename");
    drupal_goto('content/participant_importer/complete/');
}

function _participant_importer_upload_form_validate($form, &$form_state) {
    civicrm_initialize();

    $file = $form_state['complete form'][PARTICIPANT_IMPORTER_FORM_CSVFILE]['#file'];
    $filepath = ($file) ? drupal_realpath($file->uri) : '';
    $caseTypeId = $form_state['values'][PARTICIPANT_IMPORTER_FORM_CASE_TYPE];
    $createNewParticipants = $form_state['values'][PARTICIPANT_IMPORTER_FORM_CREATE_NEW_PARTICIPANTS];
    $createNewCases = $form_state['values'][PARTICIPANT_IMPORTER_FORM_CREATE_NEW_CASES];
    $ignoreCaseStatuses = $form_state['values'][PARTICIPANT_IMPORTER_FORM_IGNORE_CASE_STATUSES];
    $ignoreMissingParticipants = $form_state['values'][PARTICIPANT_IMPORTER_FORM_IGNORE_MISSING_PARTICIPANTS];

    Guard::AssertString_NotEmpty('$filepath', $filepath);

    if ((bool)$ignoreMissingParticipants && (bool)$createNewParticipants) {
        form_set_error(PARTICIPANT_IMPORTER_FORM_IGNORE_MISSING_PARTICIPANTS, 'Cannot create and ignore missing participants.');
    }

    if (is_numeric($caseTypeId) && $filepath) {
      $pi = new ParticipantImporter(
        $caseTypeId,
        (bool)$createNewParticipants,
        (bool)$createNewCases,
        $ignoreCaseStatuses,
        (bool)$ignoreMissingParticipants
        );

      foreach($pi->getCsvValidationErrors(_get_csv_from_filename($filepath, $form_state['values'][PARTICIPANT_IMPORTER_FORM_CSVFILE_FORMAT])) as $e) {
          form_set_error('csvfile', 'Errors within CSV file:');
          drupal_set_message($e, 'error');
      }
    }
}

function _participant_importer_complete_form_submit($form, &$form_state) {
  drupal_goto('content/participant_importer/');
}

function _participant_importer_help_form_submit($form, &$form_state) {
  drupal_goto('content/participant_importer/');
}

function _get_csv_from_filename($filepath, $format_name) {
  $result = new CsvHelper($filepath, CsvHelper::NAMES_IN_HEADER);

  if (array_key_exists($format_name, _participant_importer_csvfile_formats())) {
    $format = _participant_importer_csvfile_formats()[$format_name];
    if (array_key_exists('data_mapping', $format)) {
      $result = new CsvValueMapper($result, $format['data_mapping']);
    }
    if (array_key_exists('column_mapping', $format)) {
      $result = new CsvColumnRenamer($result, $format['column_mapping']);
    }
  }

  return $result;
}

function _participant_importer_csvfile_formats() {
  $result = array(
     'DAPS' => array(
        'column_mapping' => array(
          'SYSTEM_NUMBER_CURRENT' => 'UHL_S_number',
          'NHS_NUMBER' => 'NHS_number',
          'GENDER' => 'gender',
          'DATE OF BIRTH' => 'birth_date',
          'DBS_TITLE' => 'title',
          'DBS_FORENAMES' => 'first_name',
          'DBS_SURNAME' => 'last_name',
          'DBS_ADDRESS_LINE_1' => 'supplemental_address_1',
          'DBS_ADDRESS_LINE_2' => 'street_address',
          'DBS_ADDRESS_LINE_3' => 'supplemental_address_2',
          'DBS_ADDRESS_LINE_4' => 'city',
          'DBS_ADDRESS_LINE_5' => 'state_province',
          'DBS_POSTCODE' => 'postal_code',
          'HOME_PHONE_NUMBER' => 'phone',
          'DATE_OF_DEATH' => 'deceased_date',
          'NSTS_RETURNED_CURRENT_CENTRAL_REGISTER_POSTING' => 'is_deceased'
          ),
        'data_mapping' => array(
          'NSTS_RETURNED_CURRENT_CENTRAL_REGISTER_POSTING' => array(
            'mapping' => array(
              'D' => 1
              ),
            'value_if_no_mapping' => 0
            ),
          'DBS_FORENAMES' => array('title_case' => 1),
          'DBS_SURNAME' => array('title_case' => 1),
          'DBS_ADDRESS_LINE_1' => array('title_case' => 1),
          'DBS_ADDRESS_LINE_2' => array('title_case' => 1),
          'DBS_ADDRESS_LINE_3' => array('title_case' => 1),
          'DBS_ADDRESS_LINE_4' => array('title_case' => 1),
          'DBS_ADDRESS_LINE_5' => array('title_case' => 1),
          )
      )
    );

  return $result;
}

function _participant_importer_csvfile_formats_options() {
  $result = array();

  $result[] = 'No predefined format';

  foreach (_participant_importer_csvfile_formats() as $key => $value) {
    $result[$key] = $key;
  }

  return $result;
}

function _participant_importer_config_form($form, &$form_state) {

    $helper = new CronHelper(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB);
    $helper->addSettingsToForm($form);

    $form['Run Now'] = array(
        '#type' => 'submit',
        '#value' => t('Run All Now'),
        '#submit' => array('_participant_importer_run_cron_now'),
        '#job_name' => ''
    );

    foreach (_participant_importer_get_all_definitions() as $name => $parameters) {
        $form[$name] = array(
            '#type' => 'container',
            '#title' => $name,
        );
        $form[$name]['title'] = array(
            '#markup' => "<h1>$name</h1>",
        );
        $form[$name]['$name Run Now'] = array(
            '#type' => 'submit',
            '#value' => t("Run $name Now"),
            '#submit' => array('_participant_importer_run_cron_now'),
            '#job_name' => $name
        );
        $form[$name]['$name Reset last processed'] = array(
            '#type' => 'submit',
            '#value' => t("Reset $name Last Processed Date"),
            '#submit' => array('_participant_importer_reset_last_processed_date'),
            '#job_name' => $name
        );
    }

    return system_settings_form($form);
}

function _participant_importer_reset_last_processed_date(&$form, &$form_state) {
    $job_name = $form_state['clicked_button']['#job_name'];
    $last_processed_name = "Participant Importer $job_name last processed date";
    variable_set($last_processed_name, 0);
    watchdog(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB, "Setting last processed for $job_name: 0");
}

function participant_importer_cron() {
  civicrm_initialize();


  $helper = new CronHelper(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB);
  $creator_id = $helper->getCronUserContactId();
  $helper->runCron(function() use ($creator_id) {
    $current_hour = date('H');

    if ($current_hour < 7 || $current_hour > 19) {
      watchdog(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB, 'Skipping out of hours.');
    } else {
      $errors = _participant_importer_run_import($creator_id, NULL);

      if (!empty($errors)) {
          watchdog(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB, 'Errors found');
          MailHelper::send(LCBRU_DEFAULT_EMAIL_RECIPIENT, PARTICIPANT_IMPORTER_IMPORT_CRON_JOB . ' Load Errors', print_r($errors, True));
      } else {
          watchdog(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB, 'No errors found');
      }
  }
  });
}

function _participant_importer_run_cron_now(&$form, &$form_state) {
    set_time_limit(500);
    civicrm_initialize();
    $validation_errors = _participant_importer_run_import(NULL, $form_state['clicked_button']['#job_name']);

    if (!empty($validation_errors)) {
        foreach ($validation_errors as $e) {
            drupal_set_message($e, 'error');
        }
    }

    drupal_set_message(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB . ' completed');
    drupal_goto('admin/config/content/participant_importer');
}

function _participant_importer_run_import($creator_id, $job_name) {
    foreach (_participant_importer_get_all_definitions() as $name => $parameters) {
        if (is_null($job_name) || $job_name == '' || $job_name == $name) {
            _participant_importer_run_import_for(
                $name,
                $parameters,
                $creator_id
            );
        }
    }
}

function _participant_importer_run_import_for($name, $parameters, $creator_id) {
    $last_processed_name = "Participant Importer $name last processed date";

    $last_processed_date = variable_get('Participant Importer BioResource REDCap last processed date', '0');

    if ($last_processed_date < '20170614132612') {
        pp($last_processed_date, 'Before');
        variable_set('Participant Importer BioResource REDCap last processed date', '20170614132612');
        $last_processed_date = variable_get('Participant Importer BioResource REDCap last processed date', '0');
        pp($last_processed_date, 'After');
    }

    $query = "

SELECT *
FROM (
    SELECT
        CASE
        WHEN @prev_value = last_update THEN @rank_count
        WHEN @prev_value := last_update THEN @rank_count := @rank_count + 1
        END AS rank,
        x.*
    FROM (SELECT @prev_value := NULL, @rank_count := 0) y
    , (
        ${parameters['query']}
    ) x
    WHERE last_update > :last_processed_date
    ORDER BY last_update
) z
WHERE rank < 10

    ";

    try {
        if (array_key_exists('db_connection', $parameters)) {
          $db_connect = $parameters['db_connection'];
        } else {
          $db_connect = 'redcap';
        }
        db_set_active($db_connect);

        $last_processed_date = variable_get($last_processed_name, '0');

        watchdog(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB, "Last Processed for ${parameters['case_type_name']}: $last_processed_date");

        $participant_details = ArrayHelper::objectToArray(
            db_query(
                $query,
                array(':last_processed_date' => $last_processed_date)
            )->fetchAll()
        );

    } finally {
        db_set_active();
    }

    $caseH = new CaseHelper();
    $caseType = $caseH->getCaseTypeFromName($parameters['case_type_name']);

    $caseStatusHelper = new OptionValueHelper(OptionValueHelper::CASE_STATUS);
    $excludedCasesStatus = array();
    $excludedCasesStatus[] = $caseStatusHelper->getValueFromLabel('Excluded');
    $excludedCasesStatus[] = $caseStatusHelper->getValueFromLabel('Duplicate');

    $pi = new ParticipantImporter(
        $caseType['id'],
        !ArrayHelper::get($parameters, 'ignore_missing_participants', False),
        True,
        $excludedCasesStatus,
        ArrayHelper::get($parameters, 'ignore_missing_participants', False)
    );

    if (!empty($creator_id)) {
        $pi->setCreatorId($creator_id);
    }

    $errors = array();

    pp(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB, "Importing " . count($participant_details) . " records into " . $parameters['case_type_name']);
    watchdog(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB, "Importing " . count($participant_details) . " records into " . $parameters['case_type_name']);

    if ($parameters['add_pmi']) {
        $pmi = new PmiHelper();

        $participant_details = $pmi->add_pmi_details($participant_details);
    }

    if (count($participant_details) > 0) {
        $errors = $pi->batchValidateAndImport($participant_details);

        $last_update = end($participant_details)['last_update'];

        pp($last_update, 'New');

        pp($errors);

        if ($last_update > $last_processed_date) {
            $last_processed_date = $last_update;
            variable_set($last_processed_name, $last_processed_date);
            pp(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB, "Setting last processed for ${parameters['case_type_name']}: $last_processed_date");
            watchdog(PARTICIPANT_IMPORTER_IMPORT_CRON_JOB, "Setting last processed for ${parameters['case_type_name']}: $last_processed_date");
        }
    }

    return $errors;
}

function _participant_importer_get_all_definitions() {
    $result = array();

    foreach (module_implements('participant_importer_populateDefinitions') as $module) {
      $function = $module . '_participant_importer_populateDefinitions';
      $result = array_merge($result, $function());
    }

    return $result;
}
