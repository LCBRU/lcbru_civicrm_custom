<?php

const LENTEN_PREMISSION_PRINT_LABELS = 'LENTEN print labels';

function lenten_permission() {
  return array(
    LENTEN_PREMISSION_PRINT_LABELS => array (
      'title' => t(LENTEN_PREMISSION_PRINT_LABELS), 
      'description' => t(LENTEN_PREMISSION_PRINT_LABELS),
    ),
  );
}

function lenten_label_printer_populateDefinitions(array &$definitions) {
  $definitions['LENTEN Pack'] = array(
      'name' => 'LENTEN Pack',
      'permission' => LENTEN_PREMISSION_PRINT_LABELS,
      'participant_id_generators' => array(
        'study_id' => new IdGenerator('LenPt'),
        ),
      'labels' => array(
        'Recruited Patient Notes' => array(
          'id_generator' => new IdGenerator('LenSa'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_RECRUITED_PATIENT_NOTES,
          'id_count' => 1,
          'labels_per_id' => 1,
          'fields' => array(
            '{STUDY_PLACEHOLDER}' => 'LENTEN'
            )
          ),
        'EDTA Samples' => array(
          'id_generator' => new IdGenerator('LenSa'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE_AND_MESSAGE,
          'id_count' => 8,
          'labels_per_id' => 1,
          'fields' => array(
            '{MESSAGE_PLACEHOLDER}' => 'Falcon 7.5ml On ice'
            )
          ),
          'Urine Samples' => array(
          'id_generator' => new IdGenerator('LenSa'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE_AND_MESSAGE,
          'id_count' => 4,
          'labels_per_id' => 1,
          'fields' => array(
            '{MESSAGE_PLACEHOLDER}' => 'Urine'
            )
          ),
        'Participant Label' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE,
          'id_count' => 1,
          'labels_per_id' => 8
          ),
        'Visit 1 EDTA Bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_LENTEN_EDTA,
          'study_name' => 'LENTEN Visit 1',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        'Visit 2 EDTA Bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_LENTEN_EDTA,
          'study_name' => 'LENTEN Visit 2',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        'Visit 3 EDTA Bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_LENTEN_EDTA,
          'study_name' => 'LENTEN Visit 3',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        'Visit 4 EDTA Bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_LENTEN_EDTA,
          'study_name' => 'LENTEN Visit 4',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        ),
    );
}


function lenten_civicrm_validateForm( $formName, &$fields, &$files, &$form, &$errors ) {

    $contactFormBeginning = 'CRM_Case_Form_';

    if (lcbru_string_starts_with($formName, $contactFormBeginning)) {
        foreach ($fields as $key => $field) {
            if (lcbru_string_starts_with($key, lcbru_get_custom_field_id_name('CIVI_FIELD_LENTEN_ID') . '_')) {
                if (_lenten_isInvalidLentenId($field)) {
                    $errors[$key] = ts(CIVI_FIELD_LENTEN_ID . " is not valid.  Should be 'LenPtnnnnnnnnX' where nnnnnnnn is an 8 digit number and X is a check character");
                }
            }
        }
    }
    return;
}


function _lenten_isInvalidLentenId($value) {
  $idGenerator = new IdGenerator('LenPt');
  return !$idGenerator->validate($value);
}


function lenten_lcbru_populateStudyIds(array &$studyIds) {
    $studyIds[] = 'CIVI_FIELD_LENTEN_ID';
}


function lenten_lcbru_getStudyIdFieldName($studyId) {
    if (!_lenten_isInvalidLentenId($studyId)) {
        return 'CIVI_FIELD_LENTEN_ID';   
    }
}


function lenten_participant_importer_populateDefinitions() {
    return array(
        'Lenten REDCap' => array(
            'query' => "
            SELECT *
            FROM (
                SELECT
                    MAX(COALESCE(es.ts, 0)) AS last_update,
                    s.record CIVI_FIELD_LENTEN_ID,
                    s.record,
                    s.project_id,
                    s.start_date,
                    CASE s.gender
                            WHEN 0 THEN 'Female'
                            WHEN 1 THEN 'male'
                         END AS gender,
                    s.birth_date,
                     CASE
                         WHEN COALESCE(study_status, '1') = '1' THEN 'recruited'
                         WHEN non_complete_rsn = '5' THEN 'withdrawn'
                         WHEN non_complete_rsn = '8' THEN 'recruited'
                         ELSE 'excluded'
                     END AS case_status,
                    s.UHL_S_number
                 FROM (
                    SELECT
                        rd.record,
                        rd.project_id,
                        GROUP_CONCAT(CASE WHEN field_name = 's_number' THEN VALUE ELSE NULL END) AS uhl_s_number,
                        GROUP_CONCAT(CASE WHEN field_name = 'v1_visit_date' THEN VALUE ELSE NULL END) AS start_date,
                        GROUP_CONCAT(CASE WHEN field_name = 'gender' THEN VALUE ELSE NULL END) AS gender,
                        GROUP_CONCAT(CASE WHEN field_name = 'dob' THEN VALUE ELSE NULL END) AS birth_date,
                        GROUP_CONCAT(CASE WHEN field_name = 'study_status' THEN VALUE ELSE NULL END) AS study_status,
                        GROUP_CONCAT(CASE WHEN field_name = 'non_complete_rsn' THEN VALUE ELSE NULL END) AS non_complete_rsn
                    FROM    redcap_data rd
                    WHERE rd.project_id = 56
                      AND rd.field_name IN (
                        's_number',
                        'v1_visit_date',
                        'gender',
                        'dob',
                        'study_status',
                        'non_complete_rsn'
                        )
                    GROUP BY rd.record, rd.project_id
                ) s
                JOIN redcap_log_event es
                    ON es.project_id = 56
                    AND es.pk = s.record
                    AND es.`event` NOT IN ('DATA_EXPORT', 'DELETE')
                    # Ignore events caused by the data import from
                    # the mobile app
                    AND es.page NOT IN ('DataImportController:index')
                    AND es.object_type = 'redcap_data'
                    AND es.ts > :last_processed_date
                GROUP BY s.record
            ) x
            WHERE LENGTH(TRIM(COALESCE(CIVI_FIELD_LENTEN_ID, ''))) > 0
                    AND LENGTH(TRIM(COALESCE(UHL_S_Number, ''))) > 0
                    AND case_status IS NOT NULL
            ",
             'case_type_name' => CIVI_CASETYPE_LENTEN,
             'add_pmi' => 1
        )
    );
}
