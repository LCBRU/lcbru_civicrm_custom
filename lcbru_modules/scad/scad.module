<?php

/**
 * @file
 * A module to support recruitment into the EMMACE-4 study
 */

const SCAD_PREMISSION_CONFIG = 'SCAD Configuration';
const SCAD_IMPORT_CRON_JOB = 'SCAD Import';
const SCAD_PREMISSION_PRINT_LABELS = 'print SCAD labels';
const SCAD_PREMISSION_BLIND = 'blind SCAD';
const SCAD_PREMISSION_UNBLIND = 'Unblind SCAD';
const SCAD_LAST_PROCESSED_VARIABLE_NAME = 'SCAD LAST PROCESSED';

function scad_civicrm_validateForm( $formName, &$fields, &$files, &$form, &$errors ) {

    $contactFormBeginning = 'CRM_Case_Form_';

    if (lcbru_string_starts_with($formName, $contactFormBeginning)) {
        foreach ($fields as $key => $field) {
            if (lcbru_string_starts_with($key, lcbru_get_custom_field_id_name('CIVI_FIELD_SCAD_BRICCS_ID') . '_')) {
                if (briccs_isInvalidBriccsId($field)) {
                    $errors[$key] = ts(CIVI_FIELD_SCAD_BRICCS_ID . " is not valid.  Should be of the format 'BPtnnnnnnnn', where 'nnnnnnnn' is a 8 digit number");
                }
            }
            if (lcbru_string_starts_with($key, lcbru_get_custom_field_id_name('CIVI_FIELD_SCAD_ID') . '_')) {
                if (_scad_isInvalidScadId($field)) {
                    $errors[$key] = ts(CIVI_FIELD_SCAD_ID . " is not valid.  Should be of the format 'ScPtnnnnnnnX', where 'nnnnnnn' is a 7 digit number and X is a valid check letter");
                }
            }
        }
    }
    return;
}

function _scad_isInvalidScadId($value) {
  $idGenerator = new IdGenerator('ScPt');

  return !$idGenerator->validate($value);

}

function scad_lcbru_populateStudyIds(array &$studyIds) {
    $studyIds[] = 'CIVI_FIELD_SCAD_ID';
    $studyIds[] = 'CIVI_FIELD_SCAD_BRICCS_ID';
}

function scad_lcbru_getAutoCustomFieldValue($fieldName) {
    Guard::AssertString_NotEmpty('$fieldName', $fieldName);

    switch ($fieldName) {
        case 'CIVI_FIELD_SCAD_ID':
            $studyIdGenerator = new IdGenerator('ScPt');
            return $studyIdGenerator->next();
            break;
    }
}

function scad_lcbru_getStudyIdFieldName($studyId) {
    if (!_scad_isInvalidScadId($studyId)) {
        return 'CIVI_FIELD_SCAD_ID';
    } elseif (!briccs_isInvalidBriccsId($studyId)) {
        return 'CIVI_FIELD_SCAD_BRICCS_ID';   
    }
}

function scad_label_printer_populateDefinitions(array &$definitions) {
  $definitions['SCAD Pack'] = array(
      'name' => 'SCAD Pack',
      'permission' => SCAD_PREMISSION_PRINT_LABELS,
      'participant_id_generators' => array(
        'study_id' => new IdGenerator('ScPt'),
        ),
      'labels' => array(
        'EDTA Samples' => array(
          'id_generator' => new IdGenerator('ScSa'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE_AND_MESSAGE,
          'id_count' => 6,
          'labels_per_id' => 1,
          'fields' => array(
            '{MESSAGE_PLACEHOLDER}' => ''
            )
          ),
        'URINE Bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_URINE,
          'study_name' => 'SCAD',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        'Citrate Bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_CITRATE,
          'study_name' => 'SCAD',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        'Serum Bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_SERUM,
          'study_name' => 'SCAD',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        ),
    );
  $definitions['SCAD Blood Only Pack'] = array(
      'name' => 'SCAD Blood OnlyPack',
      'permission' => SCAD_PREMISSION_PRINT_LABELS,
      'participant_id_generators' => array(
        'study_id' => new IdGenerator('ScPt'),
        ),
      'labels' => array(
        'Participant' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE_AND_MESSAGE,
          'id_count' => 1,
          'labels_per_id' => 1,
          'fields' => array(
            '{MESSAGE_PLACEHOLDER}' => ''
            )
          ),
        'Sample' => array(
          'id_generator' => new IdGenerator('ScSa'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE_AND_MESSAGE,
          'id_count' => 3,
          'labels_per_id' => 1,
          'fields' => array(
            '{MESSAGE_PLACEHOLDER}' => ''
            )
          ),
        ),
    );
}

/**
 * Register study specific permissions
 */
function scad_permission() {
  return array(
    SCAD_PREMISSION_PRINT_LABELS => array(
      'title' => t('Print SCAD labels'), 
      'description' => t('Create and print SCAD ID labels.'),
    ),
    SCAD_PREMISSION_BLIND => array (
      'title' => t('Blind SCAD IDs'), 
      'description' => t('Create blind IDs for SCAD'),
    ),
    SCAD_PREMISSION_UNBLIND => array (
      'title' => t('Unblind SCAD IDs'), 
      'description' => t('Lookup unblind IDs from blind IDs for SCAD'),
    ),
    SCAD_PREMISSION_CONFIG => array (
      'title' => t(SCAD_PREMISSION_CONFIG),
      'description' => t(SCAD_PREMISSION_CONFIG),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function scad_block_info() {
  $blocks['scad'] = array(
    'info' => t('SCAD label printing'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}

function scad_blind_unblind_populateDefinitions(array &$definitions) {
    $definitions['SCAD'] = array(
      'blinding_permission' => SCAD_PREMISSION_BLIND,
      'unblinding_permission' => SCAD_PREMISSION_UNBLIND,
      'blind_id_types' => array (
        'MRI' => 'xScMri',
        'CT' => 'xScCt',
        'FMD' => 'xScFmd',
        'Wall Stress' => 'xScWs',
        'RetinalScan' => 'xScRs'
        )
      );
    $definitions['SCAD Angiograms'] = array(
      'blinding_permission' => SCAD_PREMISSION_BLIND,
      'unblinding_permission' => SCAD_PREMISSION_UNBLIND,
      'blind_id_types' => array (
        'Angiogram' => 'xScAng',
        )
      );
}


function scad_menu() {
  $items['admin/config/content/scad'] = array(
    'title' => SCAD_PREMISSION_CONFIG,
    'description' => SCAD_PREMISSION_CONFIG,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_scad_config_form'),
    'access arguments' => array(SCAD_PREMISSION_CONFIG),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/scad/run_cron_now'] = array(
    'title' => 'Run SCAD Cron',
    'description' => 'Run SCAD Cron',
    'page callback' => '_scad_run_cron_now',
    'access arguments' => array(SCAD_PREMISSION_CONFIG),
    'type' => MENU_CALLBACK,
    'expanded' => TRUE,
  );
  return $items;
}

function _scad_config_form($form, &$form_state) {

  $helper = new CronHelper(SCAD_IMPORT_CRON_JOB);
  $helper->addSettingsToForm($form);

  $form['Run Now'] = array(
    '#type' => 'submit',
    '#value' => t('Run Now'),
    '#submit' => array('_scad_run_cron_now'),
  );
  $form['Reset Last Processed'] = array(
    '#type' => 'submit',
    '#value' => t('Reset Last Processed'),
    '#submit' => array('_scad_reset_last_processed'),
  );

  return system_settings_form($form);
}

function scad_cron() {

  civicrm_initialize();

  $helper = new CronHelper(SCAD_IMPORT_CRON_JOB);
  $creator_id = $helper->getCronUserContactId();
  $helper->runCron(function() use ($creator_id) {
        $errors = _fast_run_import($creator_id);

        if (!empty($errors)) {
            watchdog(SCAD_IMPORT_CRON_JOB, 'Errors found');
            MailHelper::send(LCBRU_DEFAULT_EMAIL_RECIPIENT, SCAD_IMPORT_CRON_JOB . ' Load Errors', print_r($errors, True));
        } else {
            watchdog(SCAD_IMPORT_CRON_JOB, 'No errors found');
        }
  });
}

function _scad_reset_last_processed() {
    variable_set(SCAD_LAST_PROCESSED_VARIABLE_NAME, '');
    pp('Last Processed Reset');
    drupal_goto('admin/config/content/scad');
}

function _scad_run_cron_now() {
    set_time_limit(500);
    civicrm_initialize();
    $validation_errors = _scad_run_import(NULL);

    if (!empty($validation_errors)) {
        foreach ($validation_errors as $e) {
            drupal_set_message($e, 'error');
        }
    }

    drupal_set_message('SCAD Participants Imported');
    drupal_goto('admin/config/content/scad');
}

function _scad_run_import($creator_id) {
    try {
        db_set_active('redcap');

        $last_processed_date = variable_get(SCAD_LAST_PROCESSED_VARIABLE_NAME, '0');

        watchdog(SCAD_IMPORT_CRON_JOB, "Last Processed: $last_processed_date");

        $participant_details = ArrayHelper::objectToArray(db_query("

SELECT *
FROM (
    SELECT
        CASE
        WHEN @prev_value = last_update THEN @rank_count
        WHEN @prev_value := last_update THEN @rank_count := @rank_count + 1
        END AS rank,
        x.*
    FROM (SELECT @prev_value := NULL, @rank_count := 0) y
    , (
                SELECT
                    GREATEST(MAX(COALESCE(es.ts, 0)), MAX(COALESCE(eq.ts, 0))) AS last_update,
                    s.CIVI_FIELD_FAST_ID,
                    s.start_date,
                    first_name,
                    last_name,
                    street_address,
                    supplemental_address_2,
                    city,
                    state_province,
                    postal_code,
                    phone,
                    email,
                    NHS_number,
                    CASE gender
                            WHEN 0 THEN 'Female'
                            WHEN 1 THEN 'male'
                         END AS gender,
                    birth_date,
                    CASE
                        WHEN wthdrwl_date IS NOT NULL THEN 'withdrawn'
                        WHEN recruited = 1 THEN 'recruited'
                    END AS case_status
                FROM    (
                    SELECT
                          rd.record,
                          rd.project_id,
                        GROUP_CONCAT(CASE WHEN field_name = 'clinic_date' THEN VALUE ELSE NULL END) AS start_date,
                        GROUP_CONCAT(CASE WHEN field_name = 'fst_label' THEN VALUE ELSE NULL END) AS CIVI_FIELD_FAST_ID,
                        GROUP_CONCAT(CASE WHEN field_name = 'first_name' THEN VALUE ELSE NULL END) AS first_name,
                        GROUP_CONCAT(CASE WHEN field_name = 'last_name' THEN VALUE ELSE NULL END) AS last_name,
                        GROUP_CONCAT(CASE WHEN field_name = 'add_1' THEN VALUE ELSE NULL END) AS street_address,
                        GROUP_CONCAT(CASE WHEN field_name = 'add_2' THEN VALUE ELSE NULL END) AS supplemental_address_2,
                        GROUP_CONCAT(CASE WHEN field_name = 'add_3' THEN VALUE ELSE NULL END) AS city,
                        GROUP_CONCAT(CASE WHEN field_name = 'add_4' THEN VALUE ELSE NULL END) AS state_province,
                        GROUP_CONCAT(CASE WHEN field_name = 'postcode' THEN VALUE ELSE NULL END) AS postal_code,
                        GROUP_CONCAT(CASE WHEN field_name = 'tel_no' THEN VALUE ELSE NULL END) AS phone,
                        GROUP_CONCAT(CASE WHEN field_name = 'email_add' THEN VALUE ELSE NULL END) AS email,
                        GROUP_CONCAT(CASE WHEN field_name = 'nhs_no' THEN VALUE ELSE NULL END) AS NHS_number,
                        GROUP_CONCAT(CASE WHEN field_name = 'gp_practice' THEN VALUE ELSE NULL END) AS gp_practice,
                        GROUP_CONCAT(CASE WHEN field_name = 'patient_reruited' THEN VALUE ELSE NULL END) AS recruited
                    FROM    redcap_data rd
                    WHERE rd.project_id = 48
                    GROUP BY rd.record, rd.project_id
                ) s
                LEFT JOIN (
                     SELECT
                            rd.record,
                            rd.project_id,
                         GROUP_CONCAT(CASE WHEN field_name = 'study_id' THEN VALUE ELSE NULL END) AS CIVI_FIELD_FAST_ID,
                         GROUP_CONCAT(CASE WHEN field_name = 'gender' THEN VALUE ELSE NULL END) AS gender,
                         REPLACE(MAX(CASE WHEN field_name = 'dob' THEN VALUE ELSE NULL END), '-', '') AS birth_date,
                         GROUP_CONCAT(CASE WHEN field_name = 'wthdrwl_date' THEN VALUE ELSE NULL END) AS wthdrwl_date
                     FROM    redcap_data rd
                     WHERE rd.project_id = 43
                     GROUP BY rd.record, rd.project_id
                ) q ON q.CIVI_FIELD_FAST_ID = s.CIVI_FIELD_FAST_ID
                LEFT JOIN redcap_log_event es
                    ON es.project_id = s.project_id
                    AND es.pk = s.record
                    AND es.`event` NOT IN ('DATA_EXPORT', 'DELETE')
                    # Ignore events caused by the data import from
                    # the mobile app
                    AND es.page NOT IN ('DataImportController:index')
                LEFT JOIN redcap_log_event eq
                    ON eq.project_id = q.project_id
                    AND eq.pk = q.record
                    AND eq.`event` NOT IN ('DATA_EXPORT', 'DELETE')
                    # Ignore events caused by the data import from
                    # the mobile app
                    AND eq.page NOT IN ('DataImportController:index')
                WHERE s.recruited = 1
                GROUP BY s.CIVI_FIELD_FAST_ID
    ) x
    WHERE last_update > :last_processed_date
    ORDER BY last_update
) z
WHERE rank < 10

        ", array(
            ':last_processed_date' => $last_processed_date
            ))->fetchAll());

    } finally {
        db_set_active();
    }

    $caseH = new CaseHelper();
    $caseType = $caseH->getCaseTypeFromName(CIVI_CASE_TYPE_SCAD);

    $pi = new ParticipantImporter(
        $caseType['id'],
        True,
        True
    );

    if (!empty($creator_id)) {
        $pi->setCreatorId($creator_id);
    }

    $errors = array();

    watchdog(SCAD_IMPORT_CRON_JOB, "Importing " . count($participant_details) . " records");

    if (count($participant_details) > 0) {

        $errors = $pi->batchValidateAndImport($participant_details);

        $last_update = end($participant_details)['last_update'];

        if ($last_update > $last_processed_date) {
            $last_processed_date = $last_update;
            variable_set(SCAD_LAST_PROCESSED_VARIABLE_NAME, $last_processed_date);
        }
    }

    return $errors;
}

