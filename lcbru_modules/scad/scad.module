<?php

/**
 * @file
 * A module to support recruitment into the SCAD study
 */

const SCAD_PREMISSION_PRINT_LABELS = 'print SCAD labels';
const SCAD_PREMISSION_BLIND = 'blind SCAD';
const SCAD_PREMISSION_UNBLIND = 'Unblind SCAD';


function scad_menu() {
  $items['content/scad/print_reg_labels'] = array(
    'title' => 'Print SCAD Reg Labels',
    'description' => 'Print SCAD Reg Labels.',
    'page callback' => '_scad_print_register_labels',
    'access arguments' => array(SCAD_PREMISSION_PRINT_LABELS),
    'type' => MENU_CALLBACK,
    'expanded' => TRUE,
  );

  return $items;
}

function _scad_print_register_labels() {

    if (empty($_GET['start']) || empty($_GET['end'])) {
        drupal_set_message("No start and end parameters provided.", 'error');

        drupal_goto('');
    }
    $start = urldecode($_GET['start']);
    $end = urldecode($_GET['end']);

    $lps = new LabelPrinter(LabelPrinter::PRINTER_CVRC_LAB_SAMPLE);

    for ($i=$start; $i < $end; $i++){
        $sampleId = "ScadReg" . str_pad($i, 5, "0", STR_PAD_LEFT);;
        $lps->printStudySample($sampleId, 1);
        usleep ( 500000 );
    }

    drupal_goto('');
}

function scad_civicrm_validateForm( $formName, &$fields, &$files, &$form, &$errors ) {

    $contactFormBeginning = 'CRM_Case_Form_';

    if (lcbru_string_starts_with($formName, $contactFormBeginning)) {
        foreach ($fields as $key => $field) {
            if (lcbru_string_starts_with($key, lcbru_get_custom_field_id_name('CIVI_FIELD_SCAD_BRICCS_ID') . '_')) {
                if (briccs_isInvalidBriccsId($field)) {
                    $errors[$key] = ts(CIVI_FIELD_SCAD_BRICCS_ID . " is not valid.  Should be of the format 'BPtnnnnnnnn', where 'nnnnnnnn' is a 8 digit number");
                }
            }
            if (lcbru_string_starts_with($key, lcbru_get_custom_field_id_name('CIVI_FIELD_SCAD_ID') . '_')) {
                if (_scad_isInvalidScadId($field)) {
                    $errors[$key] = ts(CIVI_FIELD_SCAD_ID . " is not valid.  Should be of the format 'ScPtnnnnnnnX', where 'nnnnnnn' is a 7 digit number and X is a valid check letter");
                }
            }
            if (lcbru_string_starts_with($key, lcbru_get_custom_field_id_name('CIVI_FIELD_SCAD_REG_ID') . '_')) {
                if (_scad_isInvalidScadRegId($field)) {
                    $errors[$key] = ts(CIVI_FIELD_SCAD_REG_ID . " is not valid.  Should be of the format 'ScadRegnnnnn', where 'nnnnn' is a 5 digit number");
                }
            }
            if (lcbru_string_starts_with($key, lcbru_get_custom_field_id_name('CIVI_FIELD_SCAD_FAMILY_ID') . '_')) {
                if (_scad_isInvalidScadFamilyId($field)) {
                    $errors[$key] = ts(CIVI_FIELD_SCAD_FAMILY_ID . " is not valid.  Should be of the format 'ScFmnnnnnnnX', where 'nnnnn' is a 5 digit number");
                }
            }
        }
    }
    return;
}


function _scad_isInvalidScadId($value) {
  $idGenerator = new IdGenerator('ScPt');

  return !$idGenerator->validate($value);
}


function _scad_isInvalidScadFamilyId($value) {
  $idGenerator = new IdGenerator('ScFm');

  return !$idGenerator->validate($value);
}


function _scad_isInvalidScadRegId($value) {
  return !preg_match('/^(ScadReg\d{5})?$/', $value);
}


function scad_lcbru_populateStudyIds(array &$studyIds) {
    $studyIds[] = 'CIVI_FIELD_SCAD_ID';
    $studyIds[] = 'CIVI_FIELD_SCAD_BRICCS_ID';
    $studyIds[] = 'CIVI_FIELD_SCAD_REG_ID';
}


function scad_lcbru_getAutoCustomFieldValue($fieldName) {
    Guard::AssertString_NotEmpty('$fieldName', $fieldName);

    switch ($fieldName) {
        case 'CIVI_FIELD_SCAD_ID':
            $studyIdGenerator = new IdGenerator('ScPt');
            return $studyIdGenerator->next();
            break;
    }
}


function scad_lcbru_getStudyIdFieldName($studyId) {
    if (!_scad_isInvalidScadId($studyId)) {
        return 'CIVI_FIELD_SCAD_ID';
    } elseif (!briccs_isInvalidBriccsId($studyId)) {
        return 'CIVI_FIELD_SCAD_BRICCS_ID';
    } elseif (!_scad_isInvalidScadRegId($studyId)) {
        return 'CIVI_FIELD_SCAD_REG_ID';
    } elseif (!_scad_isInvalidScadRegId($studyId)) {
        return 'CIVI_FIELD_SCAD_FAMILY_ID';
    }
}


function scad_label_printer_populateDefinitions(array &$definitions) {
  $definitions['SCAD Pack'] = array(
      'name' => 'SCAD Pack',
      'permission' => SCAD_PREMISSION_PRINT_LABELS,
      'participant_id_generators' => array(
        'study_id' => new IdGenerator('ScPt'),
        ),
      'labels' => array(
        'EDTA Samples' => array(
          'id_generator' => new IdGenerator('ScSa'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE_AND_MESSAGE,
          'id_count' => 6,
          'labels_per_id' => 1,
          'fields' => array(
            '{MESSAGE_PLACEHOLDER}' => ''
            )
          ),
        'URINE Bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_URINE,
          'study_name' => 'SCAD',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        'Citrate Bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_CITRATE,
          'study_name' => 'SCAD',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        'Serum Bag' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_BAG,
          'template' => LabelPrinter::LABEL_BAG_SERUM,
          'study_name' => 'SCAD',
          'id_count' => 1,
          'labels_per_id' => 1
          ),
        ),
    );
  $definitions['SCAD Blood Only Pack'] = array(
      'name' => 'SCAD Blood OnlyPack',
      'permission' => SCAD_PREMISSION_PRINT_LABELS,
      'participant_id_generators' => array(
        'study_id' => new IdGenerator('ScPt'),
        ),
      'labels' => array(
        'Participant' => array(
          'participant_id' => 'study_id',
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE_AND_MESSAGE,
          'id_count' => 1,
          'labels_per_id' => 1,
          'fields' => array(
            '{MESSAGE_PLACEHOLDER}' => ''
            )
          ),
        'Sample' => array(
          'id_generator' => new IdGenerator('ScSa'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE_AND_MESSAGE,
          'id_count' => 3,
          'labels_per_id' => 1,
          'fields' => array(
            '{MESSAGE_PLACEHOLDER}' => ''
            )
          ),
        ),
    );
  $definitions['SCAD Family Labels'] = array(
      'name' => 'SCAD Family Labels',
      'permission' => SCAD_PREMISSION_PRINT_LABELS,
      'labels' => array(
        'Family' => array(
          'id_generator' => new IdGenerator('ScFm'),
          'printer' => LabelPrinter::PRINTER_BRU_CRF_SAMPLE,
          'template' => LabelPrinter::LABEL_SAMPLE_AND_MESSAGE,
          'id_count' => 1,
          'labels_per_id' => 7,
          'fields' => array(
            '{MESSAGE_PLACEHOLDER}' => ''
            )
          ),
        ),
    );
}


function scad_permission() {
  return array(
    SCAD_PREMISSION_PRINT_LABELS => array(
      'title' => t('Print SCAD labels'), 
      'description' => t('Create and print SCAD ID labels.'),
    ),
    SCAD_PREMISSION_BLIND => array (
      'title' => t('Blind SCAD IDs'), 
      'description' => t('Create blind IDs for SCAD'),
    ),
    SCAD_PREMISSION_UNBLIND => array (
      'title' => t('Unblind SCAD IDs'), 
      'description' => t('Lookup unblind IDs from blind IDs for SCAD'),
    ),
  );
}


function scad_blind_unblind_populateDefinitions(array &$definitions) {
    $definitions['SCAD'] = array(
      'blinding_permission' => SCAD_PREMISSION_BLIND,
      'unblinding_permission' => SCAD_PREMISSION_UNBLIND,
      'blind_id_types' => array (
        'MRI' => 'xScMri',
        'CT' => 'xScCt',
        'FMD' => 'xScFmd',
        'Wall Stress' => 'xScWs',
        'RetinalScan' => 'xScRs'
        )
      );
    $definitions['SCAD Angiograms'] = array(
      'blinding_permission' => SCAD_PREMISSION_BLIND,
      'unblinding_permission' => SCAD_PREMISSION_UNBLIND,
      'blind_id_types' => array (
        'Angiogram' => 'xScAng',
        )
      );
    $definitions['SCAD MRA & CTA'] = array(
      'blinding_permission' => SCAD_PREMISSION_BLIND,
      'unblinding_permission' => SCAD_PREMISSION_UNBLIND,
      'blind_id_types' => array (
        'MRA' => 'xScMRA',
        'CTA' => 'xScCTA',
        )
      );
}


function scad_participant_importer_populateDefinitions() {
    return array(
        'SCAD REDCap' => array(
            'query' => "
                SELECT
                    GREATEST(MAX(COALESCE(es.ts, 0)), MAX(COALESCE(eq.ts, 0))) AS last_update,
                    CASE WHEN s.record LIKE 'ScPt%' THEN s.record ELSE '<auto generate>' END CIVI_FIELD_SCAD_ID,
                    CASE WHEN s.record LIKE 'BPt%' THEN s.record END CIVI_FIELD_SCAD_BRICCS_ID,
                    CASE WHEN s.record LIKE 'BPt%' THEN s.record END BRICCS_ID,
                    s.record,
                    s.scad_local_id CIVI_FIELD_SCAD_VISIT_ID,
                    scad_reg_id CIVI_FIELD_SCAD_REG_ID,
                    scad_family_id CIVI_FIELD_SCAD_FAMILY_ID,
                    start_date,
                    CASE gender
                            WHEN 0 THEN 'Female'
                            WHEN 1 THEN 'male'
                         END AS gender,
                    CASE rec_type
                            WHEN '0' THEN 'Healthy volunteer'
                            WHEN '1' THEN 'SCAD'
                          END CIVI_FIELD_SCAD_RECRUITMENT_TYPE,
                    birth_date,
                    CASE
                        WHEN withdrawn_y_n = 1 THEN 'withdrawn'
                        ELSE 'recruited'
                    END AS case_status,
                    first_name,
                    last_name,
                    supplemental_address_1,
                    street_address,
                    supplemental_address_2,
                    city,
                    state_province,
                    country,
                    postal_code,
                    LEFT(phone, 32),
                    email,
                    REPLACE(nhs_number, ' ', '') NHS_number,
                    UHL_S_number
                FROM    (
                    SELECT
                        rd.record,
                        rd.project_id,
                        GROUP_CONCAT(CASE WHEN field_name = 'scad_local_id' THEN VALUE ELSE NULL END) AS scad_local_id,
                        GROUP_CONCAT(CASE WHEN field_name = 'scadreg_id' THEN VALUE ELSE NULL END) AS scad_reg_id,
                        GROUP_CONCAT(CASE WHEN field_name = 'scad_family_id' THEN VALUE ELSE NULL END) AS scad_family_id,
                        GROUP_CONCAT(CASE WHEN field_name = 'rec_type' THEN VALUE ELSE NULL END) AS rec_type,
                        GROUP_CONCAT(CASE WHEN field_name = 'int_date' THEN VALUE ELSE NULL END) AS start_date,
                        GROUP_CONCAT(CASE WHEN field_name = 'gender' THEN VALUE ELSE NULL END) AS gender,
                        GROUP_CONCAT(CASE WHEN field_name = 'dob' THEN VALUE ELSE NULL END) AS birth_date,
                        GROUP_CONCAT(CASE WHEN field_name = 'study_status' THEN VALUE ELSE NULL END) AS study_status,
                        GROUP_CONCAT(CASE WHEN field_name = 'withdrawn_y_n' THEN VALUE ELSE NULL END) AS withdrawn_y_n
                    FROM    redcap_data rd
                    WHERE rd.project_id = 28
                    GROUP BY rd.record, rd.project_id
                ) s
                JOIN (
                    SELECT
                        rd.record,
                        rd.project_id,
                        GROUP_CONCAT(CASE WHEN field_name = 'frst_nm' THEN VALUE ELSE NULL END) AS first_name,
                        GROUP_CONCAT(CASE WHEN field_name = 'lst_nm' THEN VALUE ELSE NULL END) AS last_name,
                        GROUP_CONCAT(CASE WHEN field_name = 'addrss_ln_1' THEN VALUE ELSE NULL END) AS supplemental_address_1,
                        GROUP_CONCAT(CASE WHEN field_name = 'addrss_ln_2' THEN VALUE ELSE NULL END) AS street_address,
                        GROUP_CONCAT(CASE WHEN field_name = 'addrss_ln_3' THEN VALUE ELSE NULL END) AS supplemental_address_2,
                        GROUP_CONCAT(CASE WHEN field_name = 'addrss_city' THEN VALUE ELSE NULL END) AS city,
                        GROUP_CONCAT(CASE WHEN field_name = 'addrss_rgn' THEN VALUE ELSE NULL END) AS state_province,
                        GROUP_CONCAT(CASE WHEN field_name = 'addrss_cntry' THEN VALUE ELSE NULL END) AS country,
                        GROUP_CONCAT(CASE WHEN field_name = 'addrss_pstcd' THEN VALUE ELSE NULL END) AS postal_code,
                        GROUP_CONCAT(CASE WHEN field_name = 'prfrrd_phn_num' THEN VALUE ELSE NULL END) AS phone,
                        GROUP_CONCAT(CASE WHEN field_name = 'scad_reg_email' THEN VALUE ELSE NULL END) AS email,
                        GROUP_CONCAT(CASE WHEN field_name = 'nhs_no' THEN VALUE ELSE NULL END) AS nhs_number,
                        GROUP_CONCAT(CASE WHEN field_name = 's_number' THEN VALUE ELSE NULL END) AS UHL_S_number
                    FROM    redcap_data rd
                    WHERE rd.project_id = 31
                    GROUP BY rd.record, rd.project_id
                ) q ON q.record = s.scad_reg_id
                LEFT JOIN redcap_log_event es
                    ON es.project_id = s.project_id
                    AND es.pk = s.record
                    AND es.`event` NOT IN ('DATA_EXPORT', 'DELETE')
                    # Ignore events caused by the data import from
                    # the mobile app
                    AND es.page NOT IN ('DataImportController:index')
                LEFT JOIN redcap_log_event eq
                    ON eq.project_id = q.project_id
                    AND eq.pk = q.record
                    AND eq.`event` NOT IN ('DATA_EXPORT', 'DELETE')
                    # Ignore events caused by the data import from
                    # the mobile app
                    AND eq.page NOT IN ('DataImportController:index')
                GROUP BY s.record
                ",
             'case_type_name' => CIVI_CASE_TYPE_SCAD,
             'add_pmi' => 0
        )
    );
}

